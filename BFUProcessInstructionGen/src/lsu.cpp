// this file is not autogenerated anymore since I decided that loads and stores are no fun in this format.
#include "../BFUs/inc/lsu.hpp"
#include "../../inc/Instruction.hpp"
namespace lsu
{
    void processInstruction(Instruction &I, MachineState &CMS, MachineState &NMS, int &index)
    {

        bool regFile = (index < 0);
        MemOp memOp;
        Register rs1, rs2;
        bool load_or_store; // load is true, store is false
        // Extract the MemOp struct
        if (regFile)
        {
            if (I.get_type() == Instruction::type::I)
            {
                rs1 = CMS.getRegister(I.get_rs1());
                load_or_store = true;
            }
            else
            {
                rs1 = CMS.getRegister(I.get_rs1());
                rs2 = CMS.getRegister(I.get_rs2());
                load_or_store = false;
            }
        }
        else
        {
            if (I.get_type() == Instruction::type::I)
            {
                rs1 = CMS.getInterconnectValue(I.get_rs1());
                load_or_store = true;
            }
            else
            {
                rs1 = CMS.getInterconnectValue(index);
                rs2 = CMS.getInterconnectValue(index + 1);
                load_or_store = false;
            }
        }
        Register output = 0;
        if (load_or_store)
        {
            output = CMS.getMem((uint64_t)(rs1 + I.get_immediate()));
            if (regFile)
            {
                NMS.setRegister(I.get_rd(), output);
            }
            else
            {
                NMS.setInterconnectValue(index + 2, output);
            }
        }
        else
        {
            NMS.setMem((uint64_t)rs1 + I.get_immediate(), rs2);
        }
    }
    void (*getFunctionPTR())(Instruction &I, MachineState &CMS, MachineState &NMS, int &index)
    {
        return &processInstruction;
    }
}
